import asyncio
import locale
import logging
import sys
from os import getenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

import entities
import states
import time_parser
from callbacks import ActionButton
from entities import Remind
from keyboards import get_menu_keyboard, get_confirm_remind_creation_keyboard

# –î–ª—è –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
locale.setlocale(locale.LC_TIME, 'ru_RU')

TOKEN = getenv("BOT_TOKEN")
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

# –°–æ–∑–¥–∞–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

# setup data storage
url = 'sqlite:///example.sqlite'
scheduler.add_jobstore('sqlalchemy', url=url)
engine = create_engine(url, echo=False)
Session = sessionmaker(bind=engine)
# entities.Base.metadata.drop_all(engine)
entities.Base.metadata.create_all(engine)


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞",
                         reply_markup=get_menu_keyboard())


# –í—Ö–æ–¥ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.callback_query(ActionButton.filter(F.action == "new_reminder"))
async def enter_remind_creation(
        callback: types.CallbackQuery, callback_data: ActionButton,
        state: FSMContext):

    await callback.message.reply(
        "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "–æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    await state.set_state(states.CreateNewReminder.entering_text)
    await callback.answer()  # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∞–ª–∞


@dp.message(states.CreateNewReminder.entering_text)
async def enter_remind_text(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)  # –ó–¥–µ—Å—å –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    await message.reply("–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD/MM hh:mm")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "–æ–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    await state.set_state(states.CreateNewReminder.entering_time)


@dp.message(states.CreateNewReminder.entering_time)
async def enter_remind_text(message: Message, state: FSMContext):
    time = message.text

    parsed_time = time_parser.time_parser(time)
    if parsed_time is None:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    await state.update_data(time=parsed_time)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É

    # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    await message.reply(
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç <b>{parsed_time.strftime('%d %B –≤ %H:%M:%S')}</b>\n"
        f"{data['text']}",
        reply_markup=get_confirm_remind_creation_keyboard()
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è"
    await state.set_state(states.CreateNewReminder.confirm_creation)


async def send_remind(chat_id: str, remind_text: str):
    message_text = ("üîî –í–∞–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                    f"üí¨: {remind_text}")
    await bot.send_message(chat_id, message_text)


@dp.callback_query(ActionButton.filter(F.action == "confirm_remind_creation"))
async def confirm_remind_creation(
        callback: types.CallbackQuery, callback_data: ActionButton,
        state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()

    # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job = scheduler.add_job(send_remind, "date", run_date=data["time"],
                            args=(callback.message.chat.id, data["text"]))

    with Session() as session:
        new_remind = Remind(user_id=callback.message.chat.id, remind_date=data["time"],
                            title="", text=data["text"], scheduler_job_id=job.id)
        session.add(new_remind)
        session.commit()

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer("‚òëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
    await callback.answer()


@dp.message(F.text == "/test")
async def test_command(message: Message):
    pass


async def main() -> None:
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç—É—Ç!!
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
